snippet php
	<?php
		${1}
	?>
snippet phps
	<?php ${1} ?>
snippet tr
	TRUE
snippet fl
	FALSE
snippet n
	NULL
snippet ec
	echo "${1:string}"${2};
snippet tplvar
	<?php print ${1:var}; ?>
snippet inc
	include '${1:file}';${2}
snippet inc1
	include_once '${1:file}';${2}
snippet req
	require '${1:file}';${2}
snippet req1
	require_once '${1:file}';${2}
# $GLOBALS['...']
snippet globals
	$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}${5}
snippet $_ COOKIE['...']
	$_COOKIE['${1:variable}']${2}
snippet $_ ENV['...']
	$_ENV['${1:variable}']${2}
snippet $_ FILES['...']
	$_FILES['${1:variable}']${2}
snippet $_ Get['...']
	$_GET['${1:variable}']${2}
snippet $_ POST['...']
	$_POST['${1:variable}']${2}
snippet $_ REQUEST['...']
	$_REQUEST['${1:variable}']${2}
snippet $_ SERVER['...']
	$_SERVER['${1:variable}']${2}
snippet $_ SESSION['...']
	$_SESSION['${1:variable}']${2}
# Start Docblock
snippet /**
	/**
	 * ${1}
	 **/
# Class - post doc
snippet doc_cp
	/**
	 * ${1:undocumented class}
	 *
	 * @package ${2:default}
	 * @author ${3:`g:snips_author`}
	**/${4}
# Class Variable - post doc
snippet doc_vp
	/**
	 * ${1:undocumented class variable}
	 *
	 * @var ${2:string}
	 **/${3}
# Class Variable
snippet doc_v
	/**
	 * ${3:undocumented class variable}
	 *
	 * @var ${4:string}
	 **/
	${1:var} $${2};${5}
# Class
snippet doc_c
	/**
	 * ${3:undocumented class}
	 *
	 * @packaged ${4:default}
	 * @author ${5:`g:snips_author`}
	 **/
	${1:}class ${2:}
	{${6}
	} // END $1class $2
# Constant Definition - post doc
snippet doc_dp
	/**
	 * ${1:undocumented constant}
	 **/${2}
# Constant Definition
snippet doc_d
	// ${3:undocumented constant}
	define('${1}', ${2});
# Function - post doc
snippet doc_fp
	/**
	 * ${1:undocumented function}
	 *
	 * @return ${2:void}
	 * @author ${3:`g:snips_author`}
	 **/${4}
# Function signature
snippet doc_s
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 **/
	${1}function ${2}(${3});${7}
# Function
snippet doc_f
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 **/
	${1}function ${2}(${3}) {
		${7}
	}
# Header
snippet doc_h
	/**
	 * ${1}
	 *
	 * @author ${2:`g:snips_author`}
	 * @version ${3:$Id$}
	 * @copyright ${4:$2}, `strftime('%d %B, %Y')`
	 * @package ${5:default}
	 **/
	
	/**
	 * Define DocBlock
	 *//
# Interface
snippet doc_i
	/**
	 * ${2:undocumented class}
	 *
	 * @package ${3:default}
	 * @author ${4:`g:snips_author`}
	 **/
	interface ${1:}
	{${5}
	} // END interface $1
# class ...
snippet class
	/**
	 * ${1}
	 **/
	class ${2:ClassName}
	{
		${3}
		function ${4:__construct}(${5:argument})
		{
			${6:// code...}
		}
	}
# define(...)
snippet def
	define('${1}'${2});${3}
# defined(...)
snippet def?
	${1}defined('${2}')${3}
snippet wh
	while (${1:/* condition */}) {
		${2:// code...}
	}
# do ... while
snippet do
	do {
		${2:// code... }
	} while (${1:/* condition */});
snippet if
	if (${1:/* condition */}) {
		${2:// code...}
	}
snippet ife
	if (${1:/* condition */}) {
		${2:// code...}
	} else {
		${3:// code...}
	}
	${4}
snippet else
	else {
		${1:// code...}
	}
snippet elseif
	elseif (${1:/* condition */}) {
		${2:// code...}
	}
# Tertiary conditional
snippet t
	$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
snippet switch
	switch ($${1:variable}) {
		case '${2:value}':
			${3:// code...}
			break;
		${5}
		default:
			${4:// code...}
			break;
	}
snippet case
	case '${1:value}':
		${2:// code...}
		break;${3}
snippet for
	for ($i = 0; $i < count(${1}); $i++) {
		${2: // code...}
	}
snippet foreach
	foreach ($${1:variable} as $${2:key} =>$${3:value}) {
		${4:// code...}
	}
snippet fe
	if (!empty($${1:variable})) {
		foreach ($$1 as $${2:key} => $${3:value}) {
			${4}
		}
	}
snippet f
	function ${1}(${2}) {
		${3}
	}
snippet prif
	private function ${1}(${2}) {
		${3}
	}
snippet pubf
	public function ${1}(${2}) {
		${3}
	}
snippet prof
	protected function ${1}(${2}) {
		${3}
	}
snippet fm
	$form${1}
snippet fms
	$form_state${1}
snippet fi
	$form['${1}'] = array(
		'#type'  => '${2}',
		'#title' => t('${3}'),
	);
snippet fsubmit
	$form['actions']['${1:submit}'] = array(
		'#type'  => 'submit',
		'#value' => t('${2:Save}'),
	);
snippet ftext
	$form['${1}'] = array(
		'#type'  => 'textfield',
		'#title' => t('${2}'),
	);
snippet dfs
	default_values
snippet fdf
	#default_value
snippet ar
	array(${1})${2:;}
snippet ari
	'${1}' => ${2},
# $... = array (...)
snippet array
	array(
		'${2}' => ${3},
	)${1}
snippet _p
	$_POST['${1}']${2}
snippet wd
	watchdog('${1:dk}', __FUNCTION__ . ": ${2}");
snippet dsmf
  dsm(__FUNCTION__);
snippet hook
	Implementation of hook_${1}().${2}
snippet d7menu
	/**
	 * Implementation of hook_menu().
	 */
	function ${1}_menu() {
		$items['${2}'] = array(
			'title' => '${3}',
			'description' => '${4}',
			'type' => MENU_NORMAL_ITEM,
			'page callback' => '${5}',
			'access callback' => '${6}',
		);
		
		return $items;
	}
snippet d7blockinfo
	/**
	 * Implements hook_block_info().
	 */
	function ${1}_block_info() {
		$blocks = array();

		$blocks['${2}'] = array(
			'info' => t('${3}'),
		);
		
		return $blocks;
	}
snippet d7blockview
	/**
	 * Implements hook_block_view().
	 */
	function ${1}_block_view($delta='') {
		$block = array();
		
		switch($delta) {
			case '${2}' :
				$block['content'] = ${3}_view();
				break;
		}
		
		return $block;
	}
snippet d7theme
	function ${1}_theme($existing, $type, $theme, $path) {
		return array(
			'${2}' => array(
				'template' => '${3}',
				'variables' => array(
					'${4}' => NULL,
				),
			),
		);
	}
snippet d7schema
	/**
	 * Implementation of hook_schema().
	 */
	function ${1:module_name}_schema() {
		$schema = array();

		$schema['${2:module_name}'] = array(
			'description' => '${3}',
			'fields' => array(
				'${4:field_name}' => array(
					'description' => '${5}',
					'type' => 'serial',
					'unsigned' => TRUE,
					'not null' => TRUE,
				),
			),
			'indexes' => array(
				'${6:index_name}' => array(${7:fields}),
			),
			'primary key' => array('${field_name}'),
		);

		return $schema;
	}
snippet intfield
	'${1}' => array(
        'description' => '${2}',
        'type' => 'int',
        'unsigned' => ${3},
        'not null' => ${4},
	),
snippet d7perm
	/**
	 * Implements hook_permission().
	 */
	function ${1:module_name}_permission() {
		return array(
			'${2:perm_name}' => array(
				'title' => t('${3}'),
				'description' => t('${4}'),
			),
		);
	}
snippet d7init
	/**
	 * Implements hook_init().
	 */
	function ${1:module_name}_init() {
		${2}
	}
snippet d7form_alter
	/**
	 * Implements hook_form_FORM_ID_alter().
	 */
	function ${1}_form_${2:FORM_ID}_alter(&$form, &$form_state) {
		
	}
snippet d7get_view
	$name = '${1}';
	$display_id = '${2}';
	$view = views_get_view($name);
	if (!$view || !$view->access($display_id)) {
		return;
	}
	$title = $view->get_title();
	$view_content = $view->preview($display_id);
snippet fe
	if (!empty(${1})) {
		foreach (${1} as ${$key} => ${$value}) {
			${4}
		}
	}
snippet d7node_update
	/**
	 * hook_node_update().
	 */
	function ${1}_node_update($node) {
		switch ($node->type) {
			case '${2}':
				${3}
				break;
		}
	}
snippet d7node_view
	/**
	 * Implementation of hook_node_view().
	 */
	function ${1:MODULE_NAME}_node_view($node, $view_mode, $langcode) {
		if ('${2:NODE_TYPE}' == $node->type) {
			${3}	
		}
	}
snippet d7add_comment
	$c = new stdClass();
	$c->nid = ${1}; // Идентификатор ноды, куда будет постить.
	$c->cid = 0; // Оставьте "как есть".
	$c->pid = ${2}; // Идентификатор родительского комментария, т.е кому мы "отвечаем". 0, если не надо.
	$c->uid = ${3:$user->uid}; // Идентификатор пользователя, который оставил отзыв.
	$c->mail = ${4:$user->mail}; // Почтовый ящик отправителя.
	// Если проверка пользователь авторизован можно опустить это поле, оно будет заполняться автоматически.
	// Если же пользователь является анонимным, и вы хотите как-то его назвать, тогда заполните ник здесь.
	$c->name = '${5:Евгений}';
	$c->thread = '01/'; // Если вам нужны древовидные обсуждение, уберите эту строчку.
	$c->hostname = '${6:127.0.0.1}'; // По желанию: IP-адрес отправителя.
	$c->created = time(); // По желанию: можете установить время отправки. Полезно для создания комментариев задним числом.
	$c->is_anonymous = 0; // Оставим "как есть", это не аноним.
	$c->status = COMMENT_PUBLISHED; // Пусть сразу же будет опубликованным.
	$c->language = LANGUAGE_NONE; // Язык: тот же, что и у ноды.
	$c->subject = '${7:Тема сообщения}';
	$c->comment_body[$c->language][0]['value'] = '${8:Текст вашего сообщения}';
	$c->comment_body[$c->language][0]['format'] = 'filtered_html'; // Используемый формат ввода
	// По желанию. Если есть какие-нибудь доплонительные поля формы, сделайте по данному ниже примеру:
	// $c->field_custom_field_name[LANGUAGE_NONE][0]['value'] = 'Дополнительное поле';
	comment_submit($c); // Подготовка комментария для сохранения.
	comment_save($c); // Сохранение комментария.
snippet dmpath
	$module_path = drupal_get_path('module', '${1}');
snippet dtpath
	$theme_path = drupal_get_path('theme', '${1}');
snippet addjs
	drupal_add_js($module_path . '/js/${1}.js');
snippet addcss
	drupal_add_css($module_path . '/css/${1}.css');
snippet d7cache
	$data = array();
	$cache_cid = __FUNCTION__;
	$cache = cache_get($cache_cid);
	if (!empty($cache)) {
		$data = unserialize($cache->data);
	}
	else {
		// getting data
		$serialized = serialize($data);
		cache_set($cache_cid, $serialized);
	}
	
	return $data;
snippet d7views_pre_render
	/**
	 * Implements hook_views_pre_render().
	 */
	function ${1:MODULE_NAME}_views_pre_render(&$view) {
		if ('${2:VIEW_NAME}' == $view->name && '${3:DISPLAY_NAME}' == $view->current_display) {
			${4}
		}
	}
snippet d7compute
	/**
	 * Вычисление поля "${2}" типа computed
	 */
	function computed_field_${1:FIELD_NAME}_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
		$entity_field[0]['value'] = ${3};
	}
snippet d7views_api
	/**
	 * Implements hook_views_api().
	 */
	function ${1:MODULE_NAME}_views_api() {
		$module_path = drupal_get_path('module', 'custom_coordination');
		return array(
			'api' => 3,
			'path' => $module_path . '/views',
		);
	}
snippet d7perm
	/**
	 * Implementation of hook_permission().
	 */
	function ${1:MODULE_NAME}_permission() {
		return array(
			'${2:PERMISSION NAME}' => array(
				'title' => t('${3}'),
				'description' => t('${4}'),
			),
		);
	}

#
#
# HTML
# Some useful Unicode entities
# Non-Breaking Space
snippet nbs
	&nbsp;
# ←
snippet left
	&#x2190;
# →
snippet right
	&#x2192;
# ↑
snippet up
	&#x2191;
# ↓
snippet down
	&#x2193;
# ↩
snippet return
	&#x21A9;
# ⇤
snippet backtab
	&#x21E4;
# ⇥
snippet tab
	&#x21E5;
# ⇧
snippet shift
	&#x21E7;
# ⌃
snippet control
	&#x2303;
# ⌅
snippet enter
	&#x2305;
# ⌘
snippet command
	&#x2318;
# ⌥
snippet option
	&#x2325;
# ⌦
snippet delete
	&#x2326;
# ⌫
snippet backspace
	&#x232B;
# ⎋
snippet escape
	&#x238B;
snippet <
	<${1}>${2}<$1/>
# Generic Doctype
snippet doctype HTML 4.01 Strict
	<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN""
	"http://www.w3.org/TR/html4/strict.dtd">
snippet doctype HTML 4.01 Transitional
	<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""
	"http://www.w3.org/TR/html4/loose.dtd">
snippet doctype HTML 5
	<!DOCTYPE HTML>
snippet doctype XHTML 1.0 Frameset
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
snippet doctype XHTML 1.0 Strict
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
snippet doctype XHTML 1.0 Transitional
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
snippet doctype XHTML 1.1
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
	"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
# HTML Doctype 4.01 Strict
snippet docts
	<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN""
	"http://www.w3.org/TR/html4/strict.dtd">
# HTML Doctype 4.01 Transitional
snippet doct
	<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""
	"http://www.w3.org/TR/html4/loose.dtd">
# HTML Doctype 5
snippet doct5
	<!DOCTYPE HTML>
# XHTML Doctype 1.0 Frameset
snippet docxf
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
# XHTML Doctype 1.0 Strict
snippet docxs
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
# XHTML Doctype 1.0 Transitional
snippet docxt
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
# XHTML Doctype 1.1
snippet docx
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
	"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
snippet html
	<html>
		<head>
			<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
			<title>${1}</title>
		</head>
		<body>
			${2}
		</body>
	</html>
snippet xhtml
	<html xmlns="http://www.w3.org/1999/xhtml">
	${1}
	</html>
snippet body
	<body>
		${1}
	</body>
snippet head
	<head>
		<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
		<title>${1}</title>
		${2}
	</head>
snippet title
	<title>${1}</title>${2}
snippet script
	<script type="text/javascript" charset="utf-8">
		${1}
	</script>${2}
snippet scriptsrc
	<script src="${1}.js" type="text/javascript" charset="utf-8"></script>${2}
snippet style
	<style type="text/css" media="${1:screen}">
		${2}
	</style>${3}
snippet base
	<base href="${1}" target="${2}"`Close()`>
snippet r
	<br />
snippet cl
	class="${1}"${2}
snippet id
	id="${1}"${2}
snippet div
	<div class="${1:name}">
		${2}
	</div>
snippet span
	<span${1: class=""}>${2}</span>
snippet ul
	<ul>
		<li>${1}</li>
	</ul>
snippet li
	<li>${1}</li>
# Embed QT Movie
snippet movie
	<object width="$2" height="$3" classid="clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B"
	 codebase="http://www.apple.com/qtactivex/qtplugin.cab">
		<param name="src" value="$1"`Close()`>
		<param name="controller" value="$4"`Close()`>
		<param name="autoplay" value="$5"`Close()`>
		<embed src="${1:movie.mov}"
			width="${2:320}" height="${3:240}"
			controller="${4:true}" autoplay="${5:true}"
			scale="tofit" cache="true"
			pluginspage="http://www.apple.com/quicktime/download/"
		`Close()[1:]`>
	</object>${6}
snippet fieldset
	<fieldset id="$1">
		<legend>${1:name}</legend>
		${3}
	</fieldset>
snippet form
	<form action="${1}" method="${2:POST}" accept-charset="utf-8">
		${4}
		<input type="submit" value="${3:Сохранить}"/>
	</form>
snippet h1
	<h1>${1}</h1>${2}
snippet h2
	<h2>${1}</h2>${2}
snippet h3
	<h3>${1}</h3>${2}
snippet a
	<a href="${1}">${2}</a>
snippet input
	<input type="${1}" name="${2:some_name}" value="${3}"/>${4}
snippet label
	<label for="${2:$1}">${1:name}</label><input type="${3:text/submit/hidden/button}" name="${4:$2}" value="${5}" id="${6:$2}"`Close()`>${7}
snippet link
	<link rel="${1:stylesheet}" href="${2:/css/master.css}" type="text/css" media="${3:screen}" charset="utf-8"`Close()`>${4}
snippet mailto
	<a href="mailto:${1:joe@example.com}?subject=${2:feedback}">${3:email me}</a>
snippet meta
	<meta name="${1:name}" content="${2:content}"`Close()`>${3}
snippet opt
	<option value="${1:option}">${2:$1}</option>${3}
snippet optt
	<option>${1:option}</option>${2}
snippet select
	<select name="${1:some_name}" id="${2:$1}">
		<option value="${3:option}">${4:$3}</option>
	</select>${5}
snippet table
	<table border="${1:0}">
		<tr><th>${2:Header}</th></tr>
		<tr><th>${3:Data}</th></tr>
	</table>${4}
snippet textarea
	<textarea name="${1:Name}" rows="${2:8}" cols="${3:40}">${4}</textarea>${5}
snippet p
	<p>${1}</p>${2}
snippet ydump
	echo Yii::trace(CVarDumper::dumpAsString(${1:var}),'vardump');